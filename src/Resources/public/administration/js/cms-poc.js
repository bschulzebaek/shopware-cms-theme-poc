(function(){"use strict";var e={};e.p="bundles/cmspoc/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/cmspoc/"),Shopware.Component.register("theme-template-create",{template:'<sw-page>\n    <template #smart-bar-header><h2>Create new template</h2></template>\n    <template #smart-bar-actions>\n        <sw-button\n            :router-link="{ name: \'theme.template.list\' }"\n            variant="secondary"\n        >\n            Cancel\n        </sw-button>\n        <sw-button\n            variant="primary"\n            :is-loading="isLoading"\n            :disabled="!isValidConfig"\n            @click="onSave"\n        >\n           Save\n        </sw-button>\n    </template>\n\n    <template #content>\n        <sw-card>\n            <template v-if="template">\n                <sw-switch-field label="Active" v-model:value="template.active" />\n                <mt-text-field label="Name (TwigRenderer path)" placeholder="@BundleName/path/to/template.html.twig" v-model="template.name" />\n                <mt-text-field label="Label (Human-readable name)" v-model="template.label" />\n                <mt-textarea label="Content" v-model="template.content" />\n            </template>\n        </sw-card>\n    </template>\n\n</sw-page>\n',inject:["repositoryFactory"],props:{id:{type:String,required:!0}},data(){return{isLoading:!0,template:null}},computed:{templateRepository(){return this.repositoryFactory.create("theme_template")},isValidConfig(){return this.template&&this.template.name&&this.template.label&&this.template.content}},created(){this.onCreate()},methods:{onCreate(){this.template=this.templateRepository.create(),this.template.active=!0,this.isLoading=!1},async onSave(){this.isLoading=!0;try{await this.templateRepository.save(this.template),this.$router.push({name:"theme.template.detail",params:{id:this.template.id}})}catch(e){console.error(e)}this.isLoading=!1}}}),Shopware.Component.register("theme-template-detail",{template:'<sw-page>\n    <template #smart-bar-header><h2 v-if="template">{{ template.label }}</h2></template>\n    <template #smart-bar-actions>\n        <sw-button\n            variant="primary"\n            :is-loading="isLoading"\n            :disabled="!isValidConfig"\n            @click="onSave"\n        >\n           Save\n        </sw-button>\n    </template>\n\n    <template #content>\n        <sw-card>\n            <template v-if="template">\n                <sw-switch-field label="Active" v-model:value="template.active" />\n                <mt-text-field label="Name (TwigRenderer path)" placeholder="@BundleName/path/to/template.html.twig" v-model="template.name" />\n                <mt-text-field label="Label (Human-readable name)" v-model="template.label" />\n                <mt-textarea label="Content" v-model="template.content" />\n            </template>\n        </sw-card>\n    </template>\n</sw-page>\n',inject:["repositoryFactory"],props:{id:{type:String,required:!0}},data(){return{isLoading:!0,template:null}},computed:{templateRepository(){return this.repositoryFactory.create("theme_template")},isValidConfig(){return this.template&&this.template.name&&this.template.label&&this.template.content}},created(){this.onLoad()},methods:{async onLoad(){this.isLoading=!0,this.template=await this.templateRepository.get(this.id),this.isLoading=!1},async onSave(){this.isLoading=!0,await this.templateRepository.save(this.template),await this.onLoad(),this.isLoading=!1}}}),Shopware.Component.register("theme-template-list",{template:'<sw-page>\n    <template #smart-bar-actions>\n        <sw-button\n            :router-link="{ name: \'theme.template.create\' }"\n            variant="primary"\n        >\n            Create Template\n        </sw-button>\n    </template>\n\n    <template #content>\n            <sw-entity-listing\n                v-if="templates"\n                :items="templates"\n                :columns="templateColumns"\n                :repository="templateRepository"\n                :full-page="true"\n                :is-loading="isLoading"\n                :show-selection="false"\n                detail-route="theme.template.detail"\n            >\n                <template #column-name="{ item }">\n                    <router-link :to="`/theme/template/detail/${ item.id }`">\n                        {{ item.name }}\n                    </router-link>\n                </template>\n            </sw-entity-listing>\n    </template>\n</sw-page>\n',inject:["repositoryFactory"],mixins:[Shopware.Mixin.getByName("listing")],data(){return{isLoading:!0,templates:null,total:0}},computed:{templateRepository(){return this.repositoryFactory.create("theme_template")},templateColumns(){return[{property:"name",label:"Name",rawData:!0,primary:!0},{property:"label",label:"Label"},{property:"content",label:"Content",rawData:!0}]},templateCriteria(){return new Shopware.Data.Criteria}},methods:{async getList(){this.isLoading=!0;let e=await this.templateRepository.search(this.templateCriteria);this.total=e.total,this.templates=e,this.isLoading=!1}}}),Shopware.Module.register("theme-template",{type:"plugin",name:"Theme Templates",title:"Theme Templates",description:"sw-property.general.descriptionTextModule",color:"#ff3d58",icon:"regular-pencil-s",routes:{list:{component:"theme-template-list",path:"list"},detail:{component:"theme-template-detail",path:"detail/:id",meta:{parentPath:"theme.template.list"},props:{default(e){return{id:e.params.id}}}},create:{component:"theme-template-create",path:"create",meta:{parentPath:"theme.template.list"}}},navigation:[{label:"Theme Templates",color:"#ff3d58",path:"theme.template.list",icon:"regular-pencil-s",position:100,parent:"sw-content"}]})})();